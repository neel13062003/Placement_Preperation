#include <bits/stdc++.h>
using namespace std;

class Node{
    public:
        int data;
        Node* prev;
        Node* next;

        //Constructor
        Node(int d){
            this->data = d;
            this->prev = NULL;
            this->next = NULL;
        }

        //Destructor
        ~Node(){
            int val = this->data;
            if(next!= NULL){
                delete next;
                next= NULL;
            }
            cout<<"Memory free for node with data"<<val<<endl;
        }
};


void deleteNode(int position,Node* &head){

        //deleting first or last node
        if(position==1){

            Node* temp= head;
            temp->next->prev=NULL;
            head= temp->next;
            temp->next = NULL;

            delete temp;
        }
        else{

            //deleting any middle node or last node

            Node* curr= head;
            Node* prev= NULL;

            int count=1;
            while(count<position){
                prev= curr;
                curr=
            }


        }



}




//Traversing Linked List
void print(Node* head){

    Node* temp = head;
    while(temp!= NULL){
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}


//Gives Length of Linked List
int getLength(Node* head){
    int len=0;
    Node* temp= head;
    while(temp!= NULL){
        len++;
        temp= temp->next;
    }
    return len;
}


void insertAtHead(Node* &tail,Node* &head,int d){

    if( head== NULL ){

        Node* temp= new Node(d);
        head= temp;

        tail= temp; //

    }else{

        Node* temp =  new Node(d);

        temp -> next = head;
        head->prev = temp;
        head= temp;
    }

}


void insertAtTail(Node* &tail,Node* &head,int d){


    if(tail == NULL){

        Node* temp= new Node(d);
        tail = temp;

        head= temp;  //

    }else{
        Node* temp = new Node(d);

        tail->next = temp;
        temp->prev = tail;
        tail = temp;
    }

}



void insertAtPosition(Node* &tail, Node* &head,int position,int d){

    //insert at first position
    if(position==1){
        insertAtHead(tail,head,d);
        return;
    }

    Node* temp = head;
    int count=1;

    while(count< position-1){
        temp = temp->next;
        count++;
    }

    //inserting at last position
    if(temp->next ==NULL){
        insertAtTail(tail,head,d);
        return;
    }


    //Creating a node for d
    Node* nodeToinsert = new Node(d);

    nodeToinsert -> next = temp-> next;
    temp->next -> prev = nodeToinsert;
    temp->next = nodeToinsert;
    nodeToinsert -> prev  = temp;

}


int main(){

    Node *node1= new Node(10);


    Node *head= node1;
    Node *tail= node1;

    print(head);

    cout<<"Length of Linked List is => " << getLength(head) <<endl;


    insertAtHead(tail,head,11);
    print(head);

    insertAtHead(tail,head,12);
    print(head);

    insertAtTail(tail,head,21);
    print(head);

    insertAtTail(tail,head,22);
    print(head);

    insertAtPosition(tail,head,2,50);
    print(head);

    return 0;
}












